{
    "docs": [
        {
            "location": "/",
            "text": "Welcome",
            "title": "Home"
        },
        {
            "location": "/#welcome",
            "text": "",
            "title": "Welcome"
        },
        {
            "location": "/docker/",
            "text": "Installation\n\n\nDependencies\n\n\nDocker\n\n\nFollow these \ninstructions\n to install docker on the host machine.\n\n\nImage\n\n\nRun \ndocker pull miclaraia/geneseq\n\nto get the image. It might take a while as it's downloading some 500MB of data.\n\n\nRunning Docker\n\n\nStart the image by running:\n\n\ndocker run -i -t miclaraia/geneseq\n\n\n\n\nTo open a port to the application:\n\n\ndocker run -p 80:8080 miclaraia/geneseq\n\n\n\n\nTo open a port to mongo gui mongo-express:\n\n\ndocker run -p 8081 -i -t miclaraia/geneseq\n\n\n\n\nTo mount the database directory as a volume:\n\n\ndocker run -v ${host_directory}:/data -i -t miclaraia/geneseq\n\n\n\n\nPutting it all together:\n\n\ndocker run -p 80:8080 -p 8081 -v {host_directory}:/data -i -t miclaraia/geneseq\n\n\n\n\nCommands Inside Docker\n\n\nSupervisor\n\n\nTo restart mongodb service:\n\n\nsupervisorctl restart mongo\n\n\n\n\nTo restart the python webserver:\n\n\nsupervisorctl restart uwsgi\n\n\n\n\nTo start and stop the mongo gui mongo-express\n\n\nsupervisorctl start mongo-express\nsupervisorctl stop mongo-express\n\n\n\n\nMongodb\n\n\nTo restore a database from a compressed tar.gz mongodump, first\nplace the archive inside the host directory mounted to /data \ninside the docker container. Then run these commands:\n\n\ncd /data\ntar -zxvf {mongodump.tar.gz}\nmongorestore --db dump/gene_locale gene_locale\n\n\n\n\nInclude the \n--drop\n option to mongorestore if a previous database exists\nto ensure data integrity.\n\n\nTo dump a database, run this command:\n\n\nmongodump --db gene-locale\n\n\n\n\nThis will create a directory \ndump\n in the current directory containing the \ndatabase files. This is useful for creating periodic backups of the database\nstructure. Compress this dump by running:\n\n\ntar -zcvf mongodump.tar.gz dump\n\n\n\n\nMongo Express\n\n\nA utility which makes it easier to manage a mongo database. It \nalso has the useful capability of editing single documents \ninside a databse. Start the service with supervisorctl and\nmake sure port 8081 is exposed in your docker instance.\n\n\nConfiguration\n\n\nConfiguration file lives at \n/node_modules/mongo-express/config.js\n.\nYou can set the \nusername\n and \npassword\n fields here required to\naccess the service from a browser\n\n\nViewing\n\n\nSimply point your browser to \nlocalhost:8081\n and authenticate with\nthe credentials specified in \nconfig.js\n (\nadmin\n and \n12345678\n by default).",
            "title": "Using Docker"
        },
        {
            "location": "/docker/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/docker/#dependencies",
            "text": "Docker  Follow these  instructions  to install docker on the host machine.  Image  Run  docker pull miclaraia/geneseq \nto get the image. It might take a while as it's downloading some 500MB of data.",
            "title": "Dependencies"
        },
        {
            "location": "/docker/#running-docker",
            "text": "Start the image by running:  docker run -i -t miclaraia/geneseq  To open a port to the application:  docker run -p 80:8080 miclaraia/geneseq  To open a port to mongo gui mongo-express:  docker run -p 8081 -i -t miclaraia/geneseq  To mount the database directory as a volume:  docker run -v ${host_directory}:/data -i -t miclaraia/geneseq  Putting it all together:  docker run -p 80:8080 -p 8081 -v {host_directory}:/data -i -t miclaraia/geneseq",
            "title": "Running Docker"
        },
        {
            "location": "/docker/#commands-inside-docker",
            "text": "",
            "title": "Commands Inside Docker"
        },
        {
            "location": "/docker/#supervisor",
            "text": "To restart mongodb service:  supervisorctl restart mongo  To restart the python webserver:  supervisorctl restart uwsgi  To start and stop the mongo gui mongo-express  supervisorctl start mongo-express\nsupervisorctl stop mongo-express",
            "title": "Supervisor"
        },
        {
            "location": "/docker/#mongodb",
            "text": "To restore a database from a compressed tar.gz mongodump, first\nplace the archive inside the host directory mounted to /data \ninside the docker container. Then run these commands:  cd /data\ntar -zxvf {mongodump.tar.gz}\nmongorestore --db dump/gene_locale gene_locale  Include the  --drop  option to mongorestore if a previous database exists\nto ensure data integrity.  To dump a database, run this command:  mongodump --db gene-locale  This will create a directory  dump  in the current directory containing the \ndatabase files. This is useful for creating periodic backups of the database\nstructure. Compress this dump by running:  tar -zcvf mongodump.tar.gz dump",
            "title": "Mongodb"
        },
        {
            "location": "/docker/#mongo-express",
            "text": "A utility which makes it easier to manage a mongo database. It \nalso has the useful capability of editing single documents \ninside a databse. Start the service with supervisorctl and\nmake sure port 8081 is exposed in your docker instance.  Configuration  Configuration file lives at  /node_modules/mongo-express/config.js .\nYou can set the  username  and  password  fields here required to\naccess the service from a browser  Viewing  Simply point your browser to  localhost:8081  and authenticate with\nthe credentials specified in  config.js  ( admin  and  12345678  by default).",
            "title": "Mongo Express"
        },
        {
            "location": "/python/",
            "text": "Users\n\n\nRegistering\n\n\nWhen a user registers from the provided login page, their credentials\nare added to the database, but they don't get privileges to the private data.\nThat has to be added manually through the mongo shell or\nthe mongo-express interface.\n\n\nTo give a user privileges, either\n\n\n\n\nrun the commands inside the mongo shell  \n\n\n\n\n use gene_locale  \n\n db.users.update({username: {USERNAME}}, {$set: {super: true}})\n\n\n\n\n\n\n\n\nManually edit the user's entry from mongo-express",
            "title": "Application"
        },
        {
            "location": "/python/#users",
            "text": "",
            "title": "Users"
        },
        {
            "location": "/python/#registering",
            "text": "When a user registers from the provided login page, their credentials\nare added to the database, but they don't get privileges to the private data.\nThat has to be added manually through the mongo shell or\nthe mongo-express interface.  To give a user privileges, either   run the commands inside the mongo shell      use gene_locale    db.users.update({username: {USERNAME}}, {$set: {super: true}})    Manually edit the user's entry from mongo-express",
            "title": "Registering"
        }
    ]
}